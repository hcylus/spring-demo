<?xml version="1.0" encoding="UTF-8"?>
<!-- log4j2使用说明：
使用方式如下：
private static final Logger logger = LogManager.getLogger(实际类名.class.getName());
-->
<!--设置log4j2的自身log级别为info-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--
    自定义命名格式：
    %d：发生时间，%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2020-02-20 22:10:28,921
    %F：输出所在的类文件名
    %t：线程名称
    %p：日志级别
    %c：日志消息所在类名
    %m：消息内容
    %M：输出所在函数名
    %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
    %l：执行的函数名(类名称:行号）com.core.LogHelper.aroundService(LogHelper.java:32)
    %n：换行
    %i：从1开始自增数字
    %-5level：输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
    “${sys:user.home}”是HOME目录 如:C:\Users\heave, 此处指定任意目录如：D:\logs
-->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
    当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="info" monitorInterval="30">
    <!-- 文件路径和文件名称，方便后面引用 -->
    <Properties>
        <Property name="backupFilePatch">logs/</Property>
        <Property name="fileName">demo</Property>
    </Properties>

    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS z} %-5level %C.%M - %m%n" />
        </console>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${backupFilePatch}${fileName}-info.log"
                     filePattern="${backupFilePatch}$${date:yyyy-MM}/${fileName}-info-%d{yyyyMMddHH}.log.gz">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS z} %-5level %C.%M - %m%n" />
            <Policies>
                <!-- 归档每天的文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!-- 限制单个文件大小 -->
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${backupFilePatch}" maxDepth="3">
                    <IfFileName glob="*.log.gz" />
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--只保留30天内日志压缩包-->
                    <IfLastModified age="720H" />
                </Delete>
            </DefaultRolloverStrategy>
            <!-- 限制每天文件个数 -->
            <!-- DefaultRolloverStrategy compressionLevel="0" max="10"/ -->
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${backupFilePatch}${fileName}-error.log"
                     filePattern="${backupFilePatch}$${date:yyyy-MM}/${fileName}-error-%d{yyyyMMddHH}.log.gz">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS z} %-5level %C.%M - %m%n" />
            <Policies>
                <!-- 归档每天的文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!-- 限制单个文件大小 -->
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${backupFilePatch}" maxDepth="3">
                    <IfFileName glob="*.log.gz" />
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--只保留30天内日志压缩包-->
                    <IfLastModified age="720H" />
                </Delete>
            </DefaultRolloverStrategy>
            <!-- 限制每天文件个数 -->
            <!-- DefaultRolloverStrategy compressionLevel="0" max="10"/ -->
        </RollingFile>

    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和hibernate的一些无用的debug信息-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.eclipse.jetty" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>
</configuration>